// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import http "net/http"
import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CheckLibrarian provides a mock function with given fields: next
func (_m *Service) CheckLibrarian(next http.HandlerFunc) http.HandlerFunc {
	ret := _m.Called(next)

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func(http.HandlerFunc) http.HandlerFunc); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// CheckLoggedInMiddleware provides a mock function with given fields: next
func (_m *Service) CheckLoggedInMiddleware(next http.HandlerFunc) http.HandlerFunc {
	ret := _m.Called(next)

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func(http.HandlerFunc) http.HandlerFunc); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// CheckSameUser provides a mock function with given fields: next
func (_m *Service) CheckSameUser(next http.HandlerFunc) http.HandlerFunc {
	ret := _m.Called(next)

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func(http.HandlerFunc) http.HandlerFunc); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// ComparePassword provides a mock function with given fields: incomingPassword, storedPassword
func (_m *Service) ComparePassword(incomingPassword string, storedPassword string) (bool, error) {
	ret := _m.Called(incomingPassword, storedPassword)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(incomingPassword, storedPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(incomingPassword, storedPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoredPasswordByUsername provides a mock function with given fields: username
func (_m *Service) GetStoredPasswordByUsername(username string) (string, error) {
	ret := _m.Called(username)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
