// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import user "github.com/joshuabezaleel/library-server/pkg/core/user"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddFine provides a mock function with given fields: userID, fine
func (_m *Service) AddFine(userID string, fine uint32) (uint32, error) {
	ret := _m.Called(userID, fine)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string, uint32) uint32); ok {
		r0 = rf(userID, fine)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint32) error); ok {
		r1 = rf(userID, fine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckLibrarian provides a mock function with given fields: username
func (_m *Service) CheckLibrarian(username string) (bool, error) {
	ret := _m.Called(username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0
func (_m *Service) Create(_a0 *user.User) (*user.User, error) {
	ret := _m.Called(_a0)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(*user.User) *user.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID
func (_m *Service) Delete(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: userID
func (_m *Service) Get(userID string) (*user.User, error) {
	ret := _m.Called(userID)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalFine provides a mock function with given fields: userID
func (_m *Service) GetTotalFine(userID string) (uint32, error) {
	ret := _m.Called(userID)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserIDByUsername provides a mock function with given fields: username
func (_m *Service) GetUserIDByUsername(username string) (string, error) {
	ret := _m.Called(username)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Service) Update(_a0 *user.User) (*user.User, error) {
	ret := _m.Called(_a0)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(*user.User) *user.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
